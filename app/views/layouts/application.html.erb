<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%= display_meta_tags(default_meta_tags) %>
    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <%= favicon_link_tag('favicon.ico') %>

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload" %>
    <%= javascript_include_tag "application", "data-turbo-track": "reload", type: "module" %>
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-element-bundle.min.js"></script>

    <%#  Google tag (gtag.js) %>
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-4NDY041WD6"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'G-4NDY041WD6');
    </script>
  </head>

  <body>
    <div class="background-animation">
      <%= inline_svg_tag "night_sky_background.svg" %>
    </div>
    <%= render 'shared/header' %>
    <%= yield %>
    <script>
      window.copy = function(e) {
        // クリックしたボタンに紐づくコードの範囲の定義
        let code = e.closest('.highlight-wrap').querySelector('.rouge-code')

        // クリップボードにコードをコピーしてから、ボタンのテキストを変更する
        navigator.clipboard.writeText(code.innerText)
          .then(() => e.innerText = 'Copied')

        // 任意：コピーしたコードが選択されたようにする
        window.getSelection().selectAllChildren(code)
      }

      document.querySelectorAll('.scroll').forEach(elem => {
        const span = elem.querySelector('span');
        if (span.scrollWidth > elem.clientWidth) {
          // スクロールが必要な場合のみアニメーションを適用
          const scrollDistance = span.scrollWidth - elem.clientWidth;
          
          // CSSアニメーションを動的に生成
          const styleSheet = document.styleSheets[0];
          const animationName = `scrollText-${Math.random().toString(36).substr(2, 9)}`; // ユニークな名前を生成
          
          const keyframes = `
            @keyframes ${animationName} {
              0%, 20% { transform: translateX(0); }
              65%, 90% { transform: translateX(-${scrollDistance}px); }
              100% { transform: translateX(0); }
            }
          `;
          
          // スタイルシートにキーフレームを追加
          styleSheet.insertRule(keyframes, styleSheet.cssRules.length);
          
          // アニメーションを要素に適用
          span.style.animation = `${animationName} ${Math.min(20, Math.max(11, scrollDistance / 50))}s infinite`;
          span.classList.add('title-scroll');
        }
      });
    </script>
  </body>
</html>
